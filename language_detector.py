"""
Language Detection and Processing Module
‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤™‡≤§‡≥ç‡≤§‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü ‡≤Æ‡≤æ‡≤°‡≥ç‡≤Ø‡≥Ç‡≤≤‡≥ç

Supports: English and Kannada (‡≤ï‡≤®‡≥ç‡≤®‡≤°)
"""

from typing import Dict


class LanguageDetector:
    """
    Detects and manages language context for the application
    ‡≤Ö‡≤™‡≥ç‡≤≤‡≤ø‡≤ï‡≥á‡≤∂‡≤®‡≥ç‚Äå‡≤ó‡≤æ‡≤ó‡≤ø ‡≤≠‡≤æ‡≤∑‡≤æ ‡≤∏‡≤Ç‡≤¶‡≤∞‡≥ç‡≤≠‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤§‡≥ç‡≤§‡≥Ü‡≤π‡≤ö‡≥ç‡≤ö‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü
    """

    # Kannada Unicode range: 0C80-0CFF
    KANNADA_RANGE = (0x0C80, 0x0CFF)

    @staticmethod
    def detect_language(text: str) -> str:
        """
        Detect if text is in Kannada or English
        ‡≤™‡≤†‡≥ç‡≤Ø ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø‡≤¶‡≥Ü‡≤Ø‡≥á ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤á‡≤Ç‡≤ó‡≥ç‡≤≤‡≤ø‡≤∑‡≥ç‚Äå‡≤®‡≤≤‡≥ç‡≤≤‡≤ø‡≤¶‡≥Ü‡≤Ø‡≥á ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤™‡≤§‡≥ç‡≤§‡≥Ü‡≤π‡≤ö‡≥ç‡≤ö‡≤ø

        Args:
            text (str): Input text to analyze

        Returns:
            str: 'kn' for Kannada, 'en' for English
        """
        if not text or not text.strip():
            return 'en'  # Default to English for empty input

        # Count Kannada characters
        kannada_chars = 0
        total_chars = 0

        for char in text:
            if char.strip():  # Skip whitespace
                code_point = ord(char)
                total_chars += 1

                # Check if character is in Kannada Unicode range
                range_start = LanguageDetector.KANNADA_RANGE[0]
                range_end = LanguageDetector.KANNADA_RANGE[1]
                if range_start <= code_point <= range_end:
                    kannada_chars += 1

        if total_chars == 0:
            return 'en'

        # If more than 30% characters are Kannada, classify as Kannada
        kannada_percentage = (kannada_chars / total_chars) * 100

        return 'kn' if kannada_percentage > 30 else 'en'

    @staticmethod
    def is_kannada(text: str) -> bool:
        """Check if text contains Kannada script"""
        return LanguageDetector.detect_language(text) == 'kn'

    @staticmethod
    def get_script_name(text: str) -> str:
        """Get human-readable script name"""
        lang = LanguageDetector.detect_language(text)
        return 'Kannada (‡≤ï‡≤®‡≥ç‡≤®‡≤°)' if lang == 'kn' else 'English'


class UIStrings:
    """
    UI strings in multiple languages
    ‡≤¨‡≤π‡≥Å ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø UI ‡≤∏‡≥ç‡≤ü‡≥ç‡≤∞‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≥Å
    """

    STRINGS = {
        'en': {
            # Navigation
            'back_to_home': 'Back to Home',
            'home': 'Home',

            # Features
            'text_to_text': 'Text ‚Üí Text Analysis',
            'image_to_text': 'Image ‚Üí Text Extraction',
            'voice_to_text': 'Voice ‚Üí Text Transcription',
            'text_to_image': 'Text ‚Üí Image Generation',
            'text_to_audio': 'Text ‚Üí Audio Synthesis',
            'image_enhance': 'Image Enhancement',
            'outpainting': 'Image Outpainting',

            # Actions
            'upload_image': 'Upload Image',
            'enter_text': 'Enter your text here...',
            'enter_question': 'Enter your question or text here...',
            'process': 'Process',
            'analyze': 'Analyze',
            'generate': 'Generate',
            'enhance': 'Enhance',
            'download_pdf': 'Download PDF',
            'clear': 'Clear',
            'submit': 'Submit',
            'cancel': 'Cancel',

            # Results
            'ai_response': 'AI Response',
            'ai_analysis': 'AI Analysis',
            'extracted_text': 'Extracted Text',
            'transcription': 'Transcription',
            'result': 'Result',
            'output': 'Output',

            # Status
            'processing': 'Processing...',
            'analyzing': 'Analyzing...',
            'loading': 'Loading...',
            'please_wait': 'Please wait...',
            'success': 'Success!',
            'error': 'Error',

            # Tips
            'tips_title': 'üí° Tips for Better Results',
            'tip_clear_images': 'Use high-resolution, well-lit photos',
            'tip_speak_clearly': 'Speak clearly with moderate pace',
            'tip_be_specific': 'Be specific with your questions',

            # Messages
            'no_input': 'Please enter some text',
            'no_image': 'Please select an image file',
            'file_uploaded': 'File uploaded successfully',
            'processing_complete': 'Processing complete',

            # Placeholders
            'results_appear_here': 'Your results will appear here',
            'click_to_start': 'Click to get started',

            # Recent
            'recent_searches': 'Recent Searches',
            'no_recent_searches': 'No recent searches',

            # Common - ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø
            'welcome': 'Welcome',
            'language': 'Language',
            'settings': 'Settings',
            'help': 'Help',
            'about': 'About',
            'dashboard': 'Dashboard',

            # Feature Descriptions
            'text_to_text_desc': 'Get intelligent AI-powered responses to your questions',
            'text_to_image_desc': 'Generate stunning images from text descriptions',
            'image_to_text_desc': 'Extract and analyze text from images',
            'voice_to_text_desc': 'Convert speech to text with high accuracy',
            'image_enhance_desc': 'Enhance image quality with AI upscaling',
            'outpainting_desc': 'Expand images beyond their boundaries',
            'text_to_audio_desc': 'Convert text to natural-sounding speech',

            # Page Titles
            'homepage_title': (
                'Powerful AI tools for text, image, voice, and audio '
                'processing. Choose a feature below to get started.'
            ),
        },

        'kn': {
            # Navigation - ‡≤®‡≥ç‡≤Ø‡≤æ‡≤µ‡≤ø‡≤ó‡≥á‡≤∂‡≤®‡≥ç
            'back_to_home': '‡≤Æ‡≥Å‡≤ñ‡≤™‡≥Å‡≤ü‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤π‡≤ø‡≤Ç‡≤§‡≤ø‡≤∞‡≥Å‡≤ó‡≤ø',
            'home': '‡≤Æ‡≥Å‡≤ñ‡≤™‡≥Å‡≤ü',

            # Features - ‡≤µ‡≥à‡≤∂‡≤ø‡≤∑‡≥ç‡≤ü‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å
            'text_to_text': '‡≤™‡≤†‡≥ç‡≤Ø ‚Üí ‡≤™‡≤†‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤£‡≥Ü',
            'image_to_text': '‡≤ö‡≤ø‡≤§‡≥ç‡≤∞ ‚Üí ‡≤™‡≤†‡≥ç‡≤Ø ‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤Ø‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü',
            'voice_to_text': '‡≤ß‡≥ç‡≤µ‡≤®‡≤ø ‚Üí ‡≤™‡≤†‡≥ç‡≤Ø ‡≤™‡≥ç‡≤∞‡≤§‡≤ø‡≤≤‡≥á‡≤ñ‡≤®',
            'text_to_image': '‡≤™‡≤†‡≥ç‡≤Ø ‚Üí ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞ ‡≤â‡≤§‡≥ç‡≤™‡≤æ‡≤¶‡≤®‡≥Ü',
            'text_to_audio': '‡≤™‡≤†‡≥ç‡≤Ø ‚Üí ‡≤Ü‡≤°‡≤ø‡≤Ø‡≥ã ‡≤∏‡≤Ç‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤£‡≥Ü',
            'image_enhance': '‡≤ö‡≤ø‡≤§‡≥ç‡≤∞ ‡≤µ‡≤∞‡≥ç‡≤ß‡≤®‡≥Ü',
            'outpainting': '‡≤ö‡≤ø‡≤§‡≥ç‡≤∞ ‡≤µ‡≤ø‡≤∏‡≥ç‡≤§‡≤∞‡≤£‡≥Ü',

            # Actions - ‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≤≥‡≥Å
            'upload_image': '‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤™‡≥ç‡≤≤‡≥ã‡≤°‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø',
            'enter_text': '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤á‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø...',
            'enter_question': '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤á‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø...',
            'process': '‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø',
            'analyze': '‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤ø‡≤∏‡≤ø',
            'generate': '‡≤â‡≤§‡≥ç‡≤™‡≤æ‡≤¶‡≤ø‡≤∏‡≤ø',
            'enhance': '‡≤µ‡≤∞‡≥ç‡≤ß‡≤ø‡≤∏‡≤ø',
            'download_pdf': 'PDF ‡≤°‡≥å‡≤®‡≥ç‚Äå‡≤≤‡≥ã‡≤°‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø',
            'clear': '‡≤§‡≥Ü‡≤∞‡≤µ‡≥Å‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø',
            'submit': '‡≤∏‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø',
            'cancel': '‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø',

            # Results - ‡≤´‡≤≤‡≤ø‡≤§‡≤æ‡≤Ç‡≤∂‡≤ó‡≤≥‡≥Å
            'ai_response': 'AI ‡≤™‡≥ç‡≤∞‡≤§‡≤ø‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü',
            'ai_analysis': 'AI ‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤£‡≥Ü',
            'extracted_text': '‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶ ‡≤™‡≤†‡≥ç‡≤Ø',
            'transcription': '‡≤™‡≥ç‡≤∞‡≤§‡≤ø‡≤≤‡≥á‡≤ñ‡≤®',
            'result': '‡≤´‡≤≤‡≤ø‡≤§‡≤æ‡≤Ç‡≤∂',
            'output': '‡≤î‡≤ü‡≥ç‚Äå‡≤™‡≥Å‡≤ü‡≥ç',

            # Status - ‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø
            'processing': '‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...',
            'analyzing': '‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...',
            'loading': '‡≤≤‡≥ã‡≤°‡≥ç ‡≤Ü‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...',
            'please_wait': '‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≤ø‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø...',
            'success': '‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!',
            'error': '‡≤¶‡≥ã‡≤∑',

            # Tips - ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å
            'tips_title': 'üí° ‡≤â‡≤§‡≥ç‡≤§‡≤Æ ‡≤´‡≤≤‡≤ø‡≤§‡≤æ‡≤Ç‡≤∂‡≤ó‡≤≥‡≤ø‡≤ó‡≤æ‡≤ó‡≤ø ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å',
            'tip_clear_images': (
                '‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤® ‡≤∞‡≥Ü‡≤∏‡≤≤‡≥ç‡≤Ø‡≥Ç‡≤∂‡≤®‡≥ç, '
                '‡≤ö‡≥Ü‡≤®‡≥ç‡≤®‡≤æ‡≤ó‡≤ø ‡≤¨‡≥Ü‡≤≥‡≤ó‡≤ø‡≤¶ ‡≤´‡≥ã‡≤ü‡≥ã‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤≥‡≤∏‡≤ø'
            ),
            'tip_speak_clearly': '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤Æ ‡≤µ‡≥á‡≤ó‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü‡≤µ‡≤æ‡≤ó‡≤ø ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≤ø',
            'tip_be_specific': '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤®‡≤ø‡≤∞‡≥ç‡≤¶‡≤ø‡≤∑‡≥ç‡≤ü‡≤µ‡≤æ‡≤ó‡≤ø‡≤∞‡≤ø',

            # Messages - ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂‡≤ó‡≤≥‡≥Å
            'no_input': '‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤∏‡≥ç‡≤µ‡≤≤‡≥ç‡≤™ ‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø',
            'no_image': '‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞ ‡≤´‡≥à‡≤≤‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø',
            'file_uploaded': '‡≤´‡≥à‡≤≤‡≥ç ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤Ö‡≤™‡≥ç‡≤≤‡≥ã‡≤°‡≥ç ‡≤Ü‡≤ó‡≤ø‡≤¶‡≥Ü',
            'processing_complete': '‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü ‡≤™‡≥Ç‡≤∞‡≥ç‡≤£‡≤ó‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥Ü',

            # Placeholders - ‡≤∏‡≥ç‡≤•‡≤≥‡≤¶‡≤æ‡≤∞‡≤ó‡≤≥‡≥Å
            'results_appear_here': '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤´‡≤≤‡≤ø‡≤§‡≤æ‡≤Ç‡≤∂‡≤ó‡≤≥‡≥Å ‡≤á‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ï‡≤æ‡≤£‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤µ‡≥Ü',
            'click_to_start': '‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤≤‡≥Å ‡≤ï‡≥ç‡≤≤‡≤ø‡≤ï‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø',

            # Recent - ‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤®
            'recent_searches': '‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤® ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≤æ‡≤ü‡≤ó‡≤≥‡≥Å',
            'no_recent_searches': '‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤® ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≤æ‡≤ü‡≤ó‡≤≥‡≤ø‡≤≤‡≥ç‡≤≤',

            # Common - ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø
            'welcome': '‡≤∏‡≥ç‡≤µ‡≤æ‡≤ó‡≤§',
            'language': '‡≤≠‡≤æ‡≤∑‡≥Ü',
            'settings': '‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≥Å',
            'help': '‡≤∏‡≤π‡≤æ‡≤Ø',
            'about': '‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü',
            'dashboard': '‡≤°‡≥ç‡≤Ø‡≤æ‡≤∂‡≥ç‚Äå‡≤¨‡≥ã‡≤∞‡≥ç‡≤°‡≥ç',

            # Feature Descriptions - ‡≤µ‡≥à‡≤∂‡≤ø‡≤∑‡≥ç‡≤ü‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å
            'text_to_text_desc': '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤¨‡≥Å‡≤¶‡≥ç‡≤ß‡≤ø‡≤µ‡≤Ç‡≤§ AI-‡≤ö‡≤æ‡≤≤‡≤ø‡≤§ ‡≤™‡≥ç‡≤∞‡≤§‡≤ø‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø',
            'text_to_image_desc': '‡≤™‡≤†‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≤ø‡≤Ç‡≤¶ ‡≤Ö‡≤¶‡≥ç‡≤≠‡≥Å‡≤§ ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø',
            'image_to_text_desc': '‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≤ø‡≤Ç‡≤¶ ‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤ø‡≤∏‡≤ø',
            'voice_to_text_desc': '‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤® ‡≤®‡≤ø‡≤ñ‡≤∞‡≤§‡≥Ü‡≤Ø‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤≠‡≤æ‡≤∑‡≤£‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤†‡≥ç‡≤Ø‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤™‡≤∞‡≤ø‡≤µ‡≤∞‡≥ç‡≤§‡≤ø‡≤∏‡≤ø',
            'image_enhance_desc': 'AI ‡≤Ö‡≤™‡≥ç‚Äå‡≤∏‡≥ç‡≤ï‡≥á‡≤≤‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤®‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞ ‡≤ó‡≥Å‡≤£‡≤Æ‡≤ü‡≥ç‡≤ü‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤∏‡≤ø',
            'outpainting_desc': '‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤µ‡≥Å‡≤ó‡≤≥ ‡≤ó‡≤°‡≤ø‡≤ó‡≤≥ ‡≤Ü‡≤ö‡≥Ü‡≤ó‡≥Ü ‡≤µ‡≤ø‡≤∏‡≥ç‡≤§‡≤∞‡≤ø‡≤∏‡≤ø',
            'text_to_audio_desc': '‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥à‡≤∏‡≤∞‡≥ç‡≤ó‡≤ø‡≤ï ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø‡≤Ø ‡≤≠‡≤æ‡≤∑‡≤£‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤™‡≤∞‡≤ø‡≤µ‡≤∞‡≥ç‡≤§‡≤ø‡≤∏‡≤ø',

            # Page Titles - ‡≤™‡≥Å‡≤ü ‡≤∂‡≥Ä‡≤∞‡≥ç‡≤∑‡≤ø‡≤ï‡≥Ü‡≤ó‡≤≥‡≥Å
            'homepage_title': (
                '‡≤™‡≤†‡≥ç‡≤Ø, ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞, ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ü‡≤°‡≤ø‡≤Ø‡≥ã ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≤æ‡≤ó‡≤ø ‡≤∂‡≤ï‡≥ç‡≤§‡≤ø‡≤∂‡≤æ‡≤≤‡≤ø AI ‡≤∏‡≤æ‡≤ß‡≤®‡≤ó‡≤≥‡≥Å. '
                '‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤≤‡≥Å ‡≤ï‡≥Ü‡≤≥‡≤ó‡≤ø‡≤® ‡≤µ‡≥à‡≤∂‡≤ø‡≤∑‡≥ç‡≤ü‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤∞‡≤ø‡≤∏‡≤ø.'
            ),
        }
    }

    @staticmethod
    def get(key: str, lang: str = 'en') -> str:
        """
        Get localized string
        ‡≤∏‡≥ç‡≤•‡≤≥‡≥Ä‡≤Ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø‡≤¶ ‡≤∏‡≥ç‡≤ü‡≥ç‡≤∞‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø

        Args:
            key: String key
            lang: Language code ('en' or 'kn')

        Returns:
            Localized string
        """
        return UIStrings.STRINGS.get(lang, {}).get(key, key)

    @staticmethod
    def get_all(lang: str = 'en') -> Dict[str, str]:
        """Get all strings for a language"""
        return UIStrings.STRINGS.get(lang, UIStrings.STRINGS['en'])


def process_kannada_text(text: str) -> str:
    """
    Process Kannada text input
    ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤™‡≤†‡≥ç‡≤Ø ‡≤á‡≤®‡≥ç‚Äå‡≤™‡≥Å‡≤ü‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø

    Args:
        text: Kannada input text

    Returns:
        Processed text with Kannada context
    """
    # Add Kannada context indicator for AI processing
    return f"[‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤â‡≤§‡≥ç‡≤§‡≤∞‡≤ø‡≤∏‡≤ø / Reply in Kannada language]\n\n{text}"


def process_english_text(text: str) -> str:
    """
    Process English text input
    ‡≤á‡≤Ç‡≤ó‡≥ç‡≤≤‡≤ø‡≤∑‡≥ç ‡≤™‡≤†‡≥ç‡≤Ø ‡≤á‡≤®‡≥ç‚Äå‡≤™‡≥Å‡≤ü‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø

    Args:
        text: English input text

    Returns:
        Processed text with English context
    """
    return text


def handle_image_input(
    image_path: str,
    prompt: str,
    prompt_language: str
) -> Dict:
    """
    Handle image input with language-aware processing
    ‡≤≠‡≤æ‡≤∑‡≤æ-‡≤ú‡≤æ‡≤ó‡≥É‡≤§ ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤Ø‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞ ‡≤á‡≤®‡≥ç‚Äå‡≤™‡≥Å‡≤ü‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤ø‡≤∏‡≤ø

    Args:
        image_path: Path to image file
        prompt: User prompt/instruction
        prompt_language: Detected language ('en' or 'kn')

    Returns:
        Dictionary with processing instructions
    """
    result = {
        'image_path': image_path,
        'original_prompt': prompt,
        'language': prompt_language,
        'encoding': 'utf-8'
    }

    if prompt_language == 'kn':
        # Kannada language context
        result['ai_instruction'] = (
            f"‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤â‡≤§‡≥ç‡≤§‡≤∞‡≤ø‡≤∏‡≤ø.\n"
            f"‡≤¨‡≤≥‡≤ï‡≥Ü‡≤¶‡≤æ‡≤∞‡≤∞ ‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü: {prompt}\n\n"
            "[Please analyze this image and "
            "respond in Kannada language]"
        )
    else:
        # English language context
        result['ai_instruction'] = (
            f"Analyze this image.\n"
            f"User instruction: {prompt}"
        )

    return result


# Example usage / ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü ‡≤¨‡≤≥‡≤ï‡≥Ü
if __name__ == "__main__":
    print("=" * 60)
    print("Language Detection Test / ‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤™‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≥Ü")
    print("=" * 60)

    # Test 1: Kannada input
    kannada_text = "‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞, ‡≤á‡≤¶‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü"
    lang1 = LanguageDetector.detect_language(kannada_text)
    print(f"\nInput: {kannada_text}")
    script_name = LanguageDetector.get_script_name(kannada_text)
    print(f"Detected: {lang1} ({script_name})")
    print(f"UI String: {UIStrings.get('welcome', lang1)}")

    # Test 2: English input
    english_text = "Hello, this is English text"
    lang2 = LanguageDetector.detect_language(english_text)
    print(f"\nInput: {english_text}")
    script_name2 = LanguageDetector.get_script_name(english_text)
    print(f"Detected: {lang2} ({script_name2})")
    print(f"UI String: {UIStrings.get('welcome', lang2)}")

    # Test 3: Image processing with Kannada
    print("\n" + "=" * 60)
    print("Image Processing Test / ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞ ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≥Ü")
    print("=" * 60)

    kannada_prompt = "‡≤à ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤è‡≤®‡≤ø‡≤¶‡≥Ü?"
    result = handle_image_input(
        "test.jpg",
        kannada_prompt,
        LanguageDetector.detect_language(kannada_prompt)
    )
    print(f"\nPrompt: {result['original_prompt']}")
    print(f"Language: {result['language']}")
    print(f"AI Instruction:\n{result['ai_instruction']}")
