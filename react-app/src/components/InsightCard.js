import React, { useRef } from 'react';
import { DocumentArrowDownIcon } from '@heroicons/react/24/outline';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

const InsightCard = ({ title, content, type = 'default', timestamp }) => {
  const contentRef = useRef(null);

  const downloadAsPDF = async () => {
    if (!contentRef.current || !content) return;

    try {
      // Create a temporary container for PDF generation
      const pdfContainer = document.createElement('div');
      pdfContainer.style.position = 'absolute';
      pdfContainer.style.left = '-9999px';
      pdfContainer.style.width = '800px';
      pdfContainer.style.padding = '40px';
      pdfContainer.style.background = 'white';
      pdfContainer.style.fontFamily = 'Arial, sans-serif';
      
      pdfContainer.innerHTML = `
        <div style="margin-bottom: 30px; border-bottom: 3px solid #6366f1; padding-bottom: 20px;">
          <h1 style="color: #1f2937; font-size: 28px; margin: 0 0 10px 0;">${title}</h1>
          <p style="color: #6b7280; font-size: 14px; margin: 0;">
            Generated on ${timestamp ? new Date(timestamp).toLocaleString() : new Date().toLocaleString()}
          </p>
        </div>
        <div style="color: #374151; font-size: 14px; line-height: 1.8; white-space: pre-wrap;">
          ${content}
        </div>
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #9ca3af; font-size: 12px;">
          Generated by AI Multi-Modal Assistant
        </div>
      `;
      
      document.body.appendChild(pdfContainer);

      // Generate canvas from HTML
      const canvas = await html2canvas(pdfContainer, {
        scale: 2,
        useCORS: true,
        logging: false,
        backgroundColor: '#ffffff'
      });

      // Remove temporary container
      document.body.removeChild(pdfContainer);

      // Create PDF
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = pdfWidth;
      const imgHeight = (canvas.height * pdfWidth) / canvas.width;
      
      let heightLeft = imgHeight;
      let position = 0;

      // Add first page
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pdfHeight;

      // Add additional pages if needed
      while (heightLeft > 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pdfHeight;
      }

      // Download PDF
      const fileName = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${Date.now()}.pdf`;
      pdf.save(fileName);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    }
  };

  const getCardStyle = () => {
    switch (type) {
      case 'ai':
        return 'bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200';
      case 'extracted':
        return 'bg-gradient-to-br from-blue-50 to-cyan-50 border-blue-200';
      case 'success':
        return 'bg-gradient-to-br from-green-50 to-emerald-50 border-green-200';
      case 'warning':
        return 'bg-gradient-to-br from-yellow-50 to-orange-50 border-yellow-200';
      default:
        return 'bg-gray-50 border-gray-200';
    }
  };

  const getIconColor = () => {
    switch (type) {
      case 'ai':
        return 'text-indigo-600';
      case 'extracted':
        return 'text-blue-600';
      case 'success':
        return 'text-green-600';
      case 'warning':
        return 'text-yellow-600';
      default:
        return 'text-gray-600';
    }
  };

  return (
    <div className={`rounded-xl border-2 ${getCardStyle()} p-6 transition-all duration-300 hover:shadow-lg animate-fadeIn`}>
      <div className="flex items-start justify-between mb-4">
        <h3 className={`text-lg font-semibold ${getIconColor()} flex items-center gap-2`}>
          {type === 'ai' && (
            <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 3.5a1.5 1.5 0 013 0V4a1 1 0 001 1h3a1 1 0 011 1v3a1 1 0 01-1 1h-.5a1.5 1.5 0 000 3h.5a1 1 0 011 1v3a1 1 0 01-1 1h-3a1 1 0 01-1-1v-.5a1.5 1.5 0 00-3 0v.5a1 1 0 01-1 1H6a1 1 0 01-1-1v-3a1 1 0 00-1-1h-.5a1.5 1.5 0 010-3H4a1 1 0 001-1V6a1 1 0 011-1h3a1 1 0 001-1v-.5z" />
            </svg>
          )}
          {title}
        </h3>
        {content && (
          <button
            onClick={downloadAsPDF}
            className="flex items-center gap-2 px-3 py-1.5 bg-white hover:bg-gray-50 text-gray-700 rounded-lg border border-gray-300 transition-all duration-200 hover:shadow-md text-sm font-medium"
            title="Download as PDF"
          >
            <DocumentArrowDownIcon className="w-4 h-4" />
            <span>PDF</span>
          </button>
        )}
      </div>
      
      <div ref={contentRef} className="prose prose-sm max-w-none">
        <div className="text-gray-800 whitespace-pre-wrap leading-relaxed text-sm">
          {content || (
            <p className="text-gray-400 italic">No content yet. Generate a result to see it here.</p>
          )}
        </div>
      </div>

      {timestamp && (
        <div className="mt-4 pt-4 border-t border-gray-300">
          <p className="text-xs text-gray-500">
            Generated on {new Date(timestamp).toLocaleString()}
          </p>
        </div>
      )}
    </div>
  );
};

export default InsightCard;
